package pkg2d_terraindeformation;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Point;

/**
 * The purpose of this program is to generate a 2d landscape that can be
 * modified to show an impact to the surface. So, something like a crater
 * hitting it.
 *
 * Currently the GUI is handled almost entirely through the Netbeans GUI
 * builder, although this will probably change if enough time is put into the
 * project.
 *
 * The short version of how the program operates follows: The GUI is set up in
 * this, the main class. It is a JPanel, TextField, and Button, all contained by
 * a JFrame. The panel is the area that the 2d landscape is displayed The button
 * is to update/reset the terrain And the TextField is to change the number of
 * points that goes into the landscape generation.
 *
 * All the behavior of the landscape is managed outside this class, in the
 * 'LandscapeManager' class. That class contains the logic for generation of
 * terrain, as well as how to model an impact.
 *
 * Interaction between the two classes is pretty much limited to sending updated
 * settings and receiving a linked list that contains the points of the
 * landscape.
 *
 * The drawing of the landscape is handled in this class.
 *
 *
 *
 * @author AbramRowell & AlexBates
 */
public class MainWindow extends javax.swing.JFrame {

    LandscapeManager manager;
    Graphics2D g2d;             //to draw to the panel

    int panelWidth;       //<- used to make sure the size of the terrain is correct
    int panelHeight;      //<-

    int worldSizeX;       //<-actual size of the world (approximately)
    int worldSizeY;       //<-

    double mapScale = 1;   //changes distance between points when drawn. 0.5 is half size, 2 is double, etc
    int offsetX = 0;
    int offsetY = 0;
    int offsetHolderX = 0;
    int offsetHolderY = 0;
    int pointNum = 100;

    //these are used to calculate the offset generated by draggin the mouse across the screen
    Point initialMousePosition = new Point(0, 0);
    Point interimMousePosition = new Point(0, 0);

    public MainWindow() {
        initComponents();

        panelWidth = interactablePanel.getWidth();
        panelHeight = interactablePanel.getHeight();

        worldSizeX = panelWidth;
        worldSizeY = panelHeight;

        manager = new LandscapeManager(worldSizeX, panelHeight, pointNum);
        manager.generateTerrain(); //meant to draw something on startup of the program, but does not work.

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        resetButton = new javax.swing.JButton();
        interactablePanel = new javax.swing.JPanel();
        pointNumberField = new javax.swing.JTextField();
        pointNumLabel = new javax.swing.JLabel();
        worldWidthLabel = new javax.swing.JLabel();
        worldHeightLabel = new javax.swing.JLabel();
        worldWidthField = new javax.swing.JTextField();
        worldHeightField = new javax.swing.JTextField();
        scaleSlider = new javax.swing.JSlider();

        jCheckBox1.setText("jCheckBox1");

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Terrain Deform");
        setName("mainFrame"); // NOI18N

        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        interactablePanel.setBackground(new java.awt.Color(255, 255, 255));
        interactablePanel.setForeground(new java.awt.Color(255, 255, 255));
        interactablePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                interactablePanelMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                interactablePanelMouseReleased(evt);
            }
        });
        interactablePanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                interactablePanelMouseDragged(evt);
            }
        });
        interactablePanel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                interactablePanelKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout interactablePanelLayout = new javax.swing.GroupLayout(interactablePanel);
        interactablePanel.setLayout(interactablePanelLayout);
        interactablePanelLayout.setHorizontalGroup(
            interactablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1100, Short.MAX_VALUE)
        );
        interactablePanelLayout.setVerticalGroup(
            interactablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 498, Short.MAX_VALUE)
        );

        pointNumberField.setText("100");
        pointNumberField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pointNumberFieldActionPerformed(evt);
            }
        });

        pointNumLabel.setText("Number Of Points");

        worldWidthLabel.setText("World Width");

        worldHeightLabel.setText("World Height");

        worldWidthField.setText("1100");
        worldWidthField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                worldWidthFieldActionPerformed(evt);
            }
        });

        worldHeightField.setText("400");

        scaleSlider.setMaximum(20);
        scaleSlider.setToolTipText("");
        scaleSlider.setValue(10);
        scaleSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                scaleSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(interactablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(worldHeightLabel)
                            .addComponent(worldWidthLabel))
                        .addGap(44, 44, 44))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(pointNumLabel)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(worldWidthField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pointNumberField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(worldHeightField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resetButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(scaleSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(interactablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pointNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pointNumLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(worldWidthLabel)
                            .addComponent(worldWidthField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(worldHeightLabel)
                            .addComponent(worldHeightField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scaleSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(resetButton))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        // All of this code is dedicated to updating and refreshing variables needed to
        //generate and display the terrain.
        //linked to the reset button below the main panel.

        pointNum = Integer.valueOf(pointNumberField.getText()); //pulls the text inputted into the form beside the reset button

        panelWidth = interactablePanel.getWidth();
        panelHeight = interactablePanel.getHeight();

        worldSizeX = Integer.valueOf(worldWidthField.getText());
        worldSizeY = Integer.valueOf(worldHeightField.getText());

        offsetX = 0;
        offsetY = 0;

        manager.updateTerrainInfo(worldSizeX, worldSizeY, pointNum);
        manager.generateTerrain();

        drawTerrain();

        scaleSlider.setValue(10);
        interactablePanel.requestFocus();

    }//GEN-LAST:event_resetButtonActionPerformed

    private void interactablePanelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_interactablePanelKeyPressed
        // TODO add your handling code here:
        System.out.println(evt.getKeyCode());   //i think i'll keep this just to see what the key codes for things are later on
        //left arrow
        if (evt.getKeyCode() == 37) {
            manager.shiftTerrainHorizontal(5);
        }
        //right arrow
        if (evt.getKeyCode() == 39) {
            manager.shiftTerrainHorizontal(-5);
        }
        //up arrow
        if (evt.getKeyCode() == 38) {
            manager.shiftTerrainVertical(5);
        }
        //down arrow
        if (evt.getKeyCode() == 40) {
            manager.shiftTerrainVertical(-5);
        }
        drawTerrain();

    }//GEN-LAST:event_interactablePanelKeyPressed

    private void interactablePanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_interactablePanelMouseClicked
        interactablePanel.requestFocus();

        int direction = 1; //
        if (evt.getButton() == 3) {
            direction = -1;
        }
        manager.impact((int) (evt.getX() / mapScale), (int) (evt.getY() / mapScale), direction);
        drawTerrain();
    }//GEN-LAST:event_interactablePanelMouseClicked

    private void worldWidthFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_worldWidthFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_worldWidthFieldActionPerformed

    private void pointNumberFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pointNumberFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pointNumberFieldActionPerformed

    private void scaleSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_scaleSliderStateChanged
        // TODO add your handling code here:
        mapScale = scaleSlider.getValue() / 10.0;
        drawTerrain();
    }//GEN-LAST:event_scaleSliderStateChanged

    private void interactablePanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_interactablePanelMouseDragged
        //For whenthe user drags the mouse across the interactable panel.
        //meant to adjust the portion of the terrain that is displayed

        if (initialMousePosition.x == 0 && initialMousePosition.y == 0) {
            initialMousePosition = evt.getPoint();
        }
        interimMousePosition = evt.getPoint();

        offsetX = offsetHolderX - (initialMousePosition.x - interimMousePosition.x);
        offsetY = offsetHolderY - (initialMousePosition.y - interimMousePosition.y);

        drawTerrain();
    }//GEN-LAST:event_interactablePanelMouseDragged

    private void interactablePanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_interactablePanelMouseReleased
        // TODO add your handling code here:
        initialMousePosition = new Point(0, 0);
        interimMousePosition = evt.getPoint();

        offsetHolderX = offsetX;
        offsetHolderY = offsetY;
    }//GEN-LAST:event_interactablePanelMouseReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);

            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel interactablePanel;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel pointNumLabel;
    private javax.swing.JTextField pointNumberField;
    private javax.swing.JButton resetButton;
    private javax.swing.JSlider scaleSlider;
    private javax.swing.JTextField worldHeightField;
    private javax.swing.JLabel worldHeightLabel;
    private javax.swing.JTextField worldWidthField;
    private javax.swing.JLabel worldWidthLabel;
    // End of variables declaration//GEN-END:variables

    public void drawTerrain() {
        //Takes the position data stored within the terrain linked list to draw a series of polygons

        //this while loop makes sure the offset generated by dragging the mouse is not greater than the segment width of the landscape.
        //this prevents the edges of the rendered landscape eventually showing on the sides of the screen.
        int offsetXActual = offsetX;
        while (Math.abs(offsetXActual) > manager.segmentWidth) {
            if (offsetXActual < manager.segmentWidth) {
                manager.shiftTerrainHorizontal(-manager.segmentWidth);
                offsetXActual += manager.segmentWidth;
                offsetHolderX += manager.segmentWidth;
            } else {
                manager.shiftTerrainHorizontal(manager.segmentWidth);
                offsetXActual -= manager.segmentWidth;
                offsetHolderX -= manager.segmentWidth;
            }
        }

        g2d = (Graphics2D) interactablePanel.getGraphics();

        g2d.setBackground(Color.white); //these should really be stored in a global variable somewhere to make changing it easier.
        g2d.setColor(Color.black);      //

        g2d.clearRect(0, 0, interactablePanel.getWidth(), interactablePanel.getHeight()); //clear screen before drawing

        int count = manager.getTerrain().size() - 1;
        int[] xPoints = new int[4];
        int[] yPoints = new int[4];
        for (int i = 0; i < count; i++) {
            xPoints[0] = (int) (manager.getTerrain().get(i).xCoord * mapScale) + offsetXActual;
            xPoints[1] = (int) (manager.getTerrain().get(i + 1).xCoord * mapScale) + offsetXActual;
            xPoints[2] = xPoints[1];
            xPoints[3] = xPoints[0];
            yPoints[0] = (int) (manager.getTerrain().get(i).yCoord * mapScale) + offsetY;
            yPoints[1] = (int) (manager.getTerrain().get(i + 1).yCoord * mapScale) + offsetY;
            yPoints[2] = panelHeight + 10; //get the bottom off the screen, plus 10 for a little wiggle room
            yPoints[3] = panelHeight + 10; //

            g2d.drawPolygon(xPoints, yPoints, 2);   //for the last parameter, 2 draws the top features of the terrain (one rough line) and 4 draws the polygons that make up each section (lots of connected boxes)
            //g2d.fillPolygon(xPoints, yPoints, 4); //IF you want to have the landscape itself a solid color instead of lines, use this instead of drawPolygon. also need to pick background color somewhere.
        }
    }

}
